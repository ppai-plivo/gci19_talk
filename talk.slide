# 1
expvar
GopherCon India 2019, Goa
18 Jan 2019

Prashanth Pai
Software Development Engineer, Plivo
Psst...We're hiring!
http://bit.ly/gci19_expvar

# 2q
* Monitoring: Push

- Example: statsd
- App sends metrics asynchronously to monitoring system.
- App handles backlog, batching, retries, resource constraints.
- Resource consumption determined by rate of metric production.
- App has to know the whereabouts of monitoring system.

.image images/pushing-cart.png _ 500

# 2b
* Monitoring: Pull

- Example: prometheus, expvar
- App exposes metrics via HTTP endpoint which is polled by the monitoring system.
- Resource consumption determined by amount of metrics and polling interval.
- Can miss outliers.
- Monitoring system has to know whereabouts of app instances.

.image images/messenger-showing.png _ 400

# 3
* expvar

- Part of Go standard library.
- Metrics exposed in JSON format.
- Can expose static variables, dynamic variables, counters etc.
- Exposes *os.Args* and *runtime.Memstats* by default.
- Default handler at */debug/vars* but is configurable.

.image images/flying.png _ 500

# 4a
* Using expvar

- Use *expvar.New** family of functions. Metrics exported implicitly.
- Use **.Add()* and **.Set()* to update or set metric variables.
- Or use your own type that implements *expvar.Var* interface and use *expvar.Publish()* or *(**Map).Set* to export.

.code code/example.go  /START OMIT/,/END OMIT/

# 4b
* Inside expvar

Atomic counters that are goroutine safe.

.code code/int.go

# 5
* Example: Requests counter middleware

.code code/middleware.go /START OMIT/,/END OMIT/

# 6
* Example: Monitor number of goroutines

Your own type can implement *expvar.Var* interface.

.code code/goroutines.go /START OMIT/,/END OMIT/

# 7
* Example: Export static information

.code code/static.go /START OMIT/,/END OMIT/

# 8
* See it in action

.image images/screen.png

# 9

* Thank you

.image images/logo.png _ 300

*PS*: Visit the Plivo booth and take up the Plivo Go quiz.
*PPS*: Plivo is hiring!

# Like them gopher images ?
# Thanks to: https://github.com/egonelbre/gophers
